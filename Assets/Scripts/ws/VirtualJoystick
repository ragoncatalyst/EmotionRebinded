using System.Collections;
using UnityEngine;
using UnityEngine.EventSystems;

public class VirtualJoystick : MonoBehaviour, IDragHandler, IPointerUpHandler, IPointerDownHandler
{
    public RectTransform background; // 摇杆背景
    public RectTransform handle;     // 摇杆手柄

    public event dPGM OnInputIn, OnInputOut;
    /// <summary>
    /// invoke per frame
    /// </summary>
    public event dPGM OnInputing;
    public event dPGM OnInteractTap, OnInteractHold;
    public bool isInputing = false, outing;
    public float mag = 0;
    public bool interaction = false;

    private Vector2 inputVector = Vector2.zero;
    public Vector2 InputVector
    {
        get
        {
            if (outing)
                return Vector2.zero;
            else
                return inputVector;
        } // 提供给外部调用
    }
    public void OnPointerDown(PointerEventData eventData)
    {
        OnDrag(eventData);
        Ct.ct.CT(Inputing());
    }
    public IEnumerator Inputing()
    {
        float time = 0;
        float holdtime = 1;

        isInputing = true;
        OnInputIn?.Invoke();

        do
        {
            OnInputing?.Invoke();
            if (time != -1)
                time += Time.deltaTime;
            if (time > holdtime && mag < Ct.set.indicatorJoystickDistance)
            {
                OnInteractHold?.Invoke();
                time = -1;
            }

            yield return null;
        }
        while (inputVector != Vector2.zero);

        if (time != -1 && mag < Ct.set.indicatorJoystickDistance)
        {
            OnInteractTap?.Invoke();
        }

        OnInputOut?.Invoke();
        isInputing = false;
    }

    public void OnDrag(PointerEventData eventData)
    {
        Vector2 pos;
        if (RectTransformUtility.ScreenPointToLocalPointInRectangle(
            background, eventData.position, eventData.pressEventCamera, out pos))
        {
            // 坐标归一化 (-1 ~ 1)
            pos.x = (pos.x / background.sizeDelta.x) * 2;
            pos.y = (pos.y / background.sizeDelta.y) * 2;

            inputVector = new Vector2(pos.x, pos.y);
            float mag = inputVector.magnitude;

            if (interaction)
            {
                if (mag > Ct.set.indicatorJoystickDistance)
                {
                    inputVector = (mag > 1f) ? inputVector.normalized : inputVector;
                    outing = false;
                }
                else
                {
                    outing = true;
                }
            }
            else
                inputVector = (mag > 1f) ? inputVector.normalized : inputVector;


            // 移动手柄
            handle.anchoredPosition = new Vector2(
                inputVector.x * (background.sizeDelta.x / 2),
                inputVector.y * (background.sizeDelta.y / 2));
        }
    }

    public void OnPointerUp(PointerEventData eventData)
    {
        inputVector = Vector2.zero;
        handle.anchoredPosition = Vector2.zero;
    }
}

public delegate void dPGM();